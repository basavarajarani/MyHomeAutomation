import org.eclipse.smarthome.core.library.items.SwitchItem
import org.eclipse.smarthome.core.library.types.DecimalType
import org.eclipse.smarthome.model.script.actions.Timer
import org.eclipse.xtext.xbase.lib.Procedures


/*
 * These toggles are here to control the switch based ont he rain
 */
var Boolean NodeMCU1_Switch1_Soft_Toggle = false
var Boolean NodeMCU1_Switch2_Soft_Toggle = false
var Boolean NodeMCU1_Switch3_Soft_Toggle = false
var Boolean NodeMCU1_Switch4_Soft_Toggle = false

/************************************************************************************************************************
 * Begin of Utility Functions/Procedures
 *************************************************************************************************************************/
 
/*
 * Procedure to Turn on the Switch with the run time in Minutes
 */
val Procedures.Procedure2 <SwitchItem, Number> turnOnSwitchWithRunTimerInMinutes = [ 
	SwitchItem switchItem,
	Number timerValueInMinutes |
	logDebug("HomeAutomation","Entering turnOnSwitchWithRunTimerInMinutes with params ["+switchItem.name+","+timerValueInMinutes+"]");
	sendCommand(NodeMCU1_Switch1,ON);
	Thread::sleep(1000)
	sendCommand(switchItem,ON);

	var Timer switchTimer = createTimer(now.plusMinutes(timerValueInMinutes.intValue),[| 
										
										switchItem.sendCommand(OFF);
										Thread::sleep(1000)
										sendCommand(NodeMCU1_Switch1,OFF);										
										])	
										
	logDebug("HomeAutomation","Exiting turnOnSwitchWithRunTimerInMinutes with params ["+switchItem.name+","+timerValueInMinutes+"]");
										
]

/*
 * Procedure to Turn on the Switch with the run time in Seconds
 */
val Procedures.Procedure2 <SwitchItem, Number> turnOnSwitchWithRunTimerInSeconds = [ 
	SwitchItem switchItem,
	Number timerValueInSeconds |
	logDebug("HomeAutomation","Entering turnOnSwitchWithRunTimerInSeconds with params ["+switchItem.name+","+timerValueInSeconds+"]");
	
	sendCommand(NodeMCU1_Switch1,ON);
	Thread::sleep(1000)
	sendCommand(switchItem,ON);

	var Timer switchTimer = createTimer(now.plusSeconds(timerValueInSeconds.intValue),[| 
										switchItem.sendCommand(OFF);								
										Thread::sleep(1000)
										sendCommand(NodeMCU1_Switch1,OFF);
										])	
	logDebug("HomeAutomation","Exiting turnOnSwitchWithRunTimerInSeconds with params ["+switchItem.name+","+timerValueInSeconds+"]");
										
]

/*
 * Procedure to configure the Switch1RunningTapTimer
 */
val Procedures.Procedure0 calculateSwitch1TimerToday = [ |
	
	var Number Current_Temp = Melbourne_Weather_Current_Temp_In_Celcius.state as DecimalType
	var Number High_Temp = Melbourne_Weather_High_In_Celcius.state as DecimalType
	var Number Low_Temp = Melbourne_Weather_Low_In_Celcius.state as DecimalType
	var Number derivedTemperature =( (Low_Temp+High_Temp)/2 + Current_Temp)/2;	
	var Number derivedTemperatureTimer = Math.ceil((derivedTemperature/10).doubleValue)
	postUpdate(NodeMCU1_Switch1_Timer,derivedTemperatureTimer)
]

/*
 * Procedure to configure the Switch2OnTapTimer
 */
val Procedures.Procedure0 calculateSwitch2TimerToday = [ |
	
	var Number Current_Temp = Melbourne_Weather_Current_Temp_In_Celcius.state as DecimalType
	var Number High_Temp = Melbourne_Weather_High_In_Celcius.state as DecimalType
	var Number Low_Temp = Melbourne_Weather_Low_In_Celcius.state as DecimalType
	var Number derivedTemperature =( (Low_Temp+High_Temp)/2 + Current_Temp)/2;	
	var Number derivedTemperatureTimer = Math.ceil((derivedTemperature/10).doubleValue)
	postUpdate(NodeMCU1_Switch2_Timer,derivedTemperatureTimer)
]

/*
 * Procedure to configure the Switch3OnTapTimer
 */
val Procedures.Procedure0 calculateSwitch3TimerToday = [ |
	
	var Number Current_Temp = Melbourne_Weather_Current_Temp_In_Celcius.state as DecimalType
	var Number High_Temp = Melbourne_Weather_High_In_Celcius.state as DecimalType
	var Number Low_Temp = Melbourne_Weather_Low_In_Celcius.state as DecimalType
	var Number derivedTemperature =( (Low_Temp+High_Temp)/2 + Current_Temp)/2;	
	var Number derivedTemperatureTimer = Math.ceil((derivedTemperature/10).doubleValue)
	
	postUpdate(NodeMCU1_Switch3_Timer,derivedTemperatureTimer)
]

/*
 * Procedure to configure the Switch4OnTapTimer
 */
val Procedures.Procedure0 calculateSwitch4TimerToday = [ |
	
	var Number Current_Temp = Melbourne_Weather_Current_Temp_In_Celcius.state as DecimalType
	var Number High_Temp = Melbourne_Weather_High_In_Celcius.state as DecimalType
	var Number Low_Temp = Melbourne_Weather_Low_In_Celcius.state as DecimalType
	var Number derivedTemperature =( (Low_Temp+High_Temp)/2 + Current_Temp)/2;	
	var Number derivedTemperatureTimer = Math.ceil((derivedTemperature/10).doubleValue)
	
	postUpdate(NodeMCU1_Switch4_Timer,derivedTemperatureTimer)
]

/*
 * Procedure to turn off the switch
 */
 val Procedures.Procedure1 <SwitchItem> turnOffSwitch = [
 	SwitchItem switchItem |
 	switchItem.sendCommand(OFF);
 ]
 
 /*
  * Procedure to turn on the switch
  */
  val Procedures.Procedure1 <SwitchItem> turnOnSwitch = [
  	SwitchItem switchItem |
  	switchItem.sendCommand(ON);
  ]
/************************************************************************************************************************
 * End of Utility Functions/Procedures
 *************************************************************************************************************************/

rule Runs_Every_Hour
when
	Time cron "0 0 0/1 * * ? *"
then
	if (Melbourne_Weather_Current_Rain_In_MM.state <= 0 ){
		logDebug("HomeAutomation","Turning the NodeMCU1 Soft Toggles On")
		NodeMCU1_Switch1_Soft_Toggle = true
		NodeMCU1_Switch2_Soft_Toggle = true
		NodeMCU1_Switch3_Soft_Toggle = true
		NodeMCU1_Switch4_Soft_Toggle = true
	} else {
		logDebug("HomeAutomation","Turning the NodeMCU1 Soft Toggles Off")
		
		NodeMCU1_Switch1_Soft_Toggle = false
		NodeMCU1_Switch2_Soft_Toggle = false
		NodeMCU1_Switch3_Soft_Toggle = false
		NodeMCU1_Switch4_Soft_Toggle = false		
	}
end

/* 
rule Runs_Every_15_Seconds
when 
	Time cron "0/15 * * * * ?"
then
	logDebug("HomeAutomation", "Node MCU 1 Switch 1 Timer:"+NodeMCU1_Switch1_Timer.state);
	logDebug("HomeAutomation", "Node MCU 1 Switch 2 Timer:"+NodeMCU1_Switch2_Timer.state);
	logDebug("HomeAutomation", "Node MCU 1 Switch 3 Timer:"+NodeMCU1_Switch3_Timer.state);
	logDebug("HomeAutomation", "Node MCU 1 Switch 4 Timer:"+NodeMCU1_Switch4_Timer.state);			
end
*/
rule SystemStarted
when
	System started
then
	calculateSwitch1TimerToday.apply()
	calculateSwitch2TimerToday.apply()
	calculateSwitch3TimerToday.apply()
	calculateSwitch4TimerToday.apply()
end


rule UpdateTapSwitchOnTimings
when
	Time cron "0 0 0/1 * * ? *"
then
	calculateSwitch1TimerToday.apply()
	calculateSwitch2TimerToday.apply()
	calculateSwitch3TimerToday.apply()
	calculateSwitch4TimerToday.apply()
end


rule SystemStopped
when 
	System shuts down
then
	 	logDebug("HomeAutomation","Entering--> NodeMCU1.SystemStopped")

	/*
	 * Turn off all the switches
	 */
	 
	 NodeMCU1_Switches.members.forEach[ NodeMCU_Switch |
	 	logDebug("HomeAutomation","Switching Off the Switch:"+NodeMCU_Switch.name)
	 	NodeMCU_Switch.sendCommand(OFF)
	 ]
	  
	 	logDebug("HomeAutomation","Exiting--> NodeMCU1.SystemStopped")
	 
end


rule ScheduleNodeMCU1Switches
when
	Time cron "0 0 0/1 * * ? *"
	
then
	logDebug("HomeAutomation", "ScheduleNodeMCU1Switches")
	/*
	 * ********************************************************************************************************************
	 * NodeMCU1 Switch1 Section
	 * ********************************************************************************************************************
	 */
	 
	/* 
	 * Calculate the NodeMCU1 Switch1 timer
	 * If the timer has to depend only on the derivedTemperature then use the below
	 */
	 if (NodeMCU1_Switch1_Soft_Toggle) {
		//turnOnSwitchWithRunTimerInSeconds.apply(NodeMCU1_Switch1,NodeMCU1_Switch1_Timer.state as DecimalType)
	 }									
	/*
	 * ********************************************************************************************************************
	 * NodeMCU1 Switch2 Section
	 * ********************************************************************************************************************
	 */	
	 if (NodeMCU1_Switch2_Soft_Toggle) {

		//turnOnSwitchWithRunTimerInSeconds.apply(NodeMCU1_Switch2,NodeMCU1_Switch2_Timer.state as DecimalType)
	 }			
	/*
	 * ********************************************************************************************************************
	 * NodeMCU1 Switch3 Section
	 * ********************************************************************************************************************
	 */											
		 if (NodeMCU1_Switch3_Soft_Toggle) {
	//	turnOnSwitchWithRunTimerInSeconds.apply(NodeMCU1_Switch3,NodeMCU1_Switch3_Timer.state as DecimalType)
	
	}
	/*
	 * ********************************************************************************************************************
	 * NodeMCU1 Switch4 Section
	 * ********************************************************************************************************************
	 */							
	if (NodeMCU1_Switch2_Soft_Toggle) {
	
	//	turnOnSwitchWithRunTimerInSeconds.apply(NodeMCU1_Switch4,NodeMCU1_Switch4_Timer.state as DecimalType)		
		
	}																			
end

rule NodeStatusReceived
when
	Item NodeMCU1_Status received update
then
		logDebug("HomeAutomation", "NodeStatusReceived:"+NodeMCU1_Status.state);
		if ( NodeMCU1_Status.state != "Offline") {
			var DateTimeType dateTime = new DateTimeType();
		//	NodeMCU1_Last_Ping.postUpdate(dateTime.format("[%1$td/%1$tm/%1$tY %1$tT]"));
		}
		
end

rule startLillyPillyBedTapFor2MinutesNonSummer
when
	Time cron "0 30 8,20 * MAR-NOV ? *"
then
		var Number rainToday = Melbourne_Weather_Rain_In_MM.state as DecimalType;
		var Number rainYesterday = Melbourne_Weather_Current_Rain_In_MM.historicState(now.minusDays(1)).state as DecimalType;

	if (rainToday <=0 && rainYesterday <=0 ) {
		turnOnSwitchWithRunTimerInMinutes.apply(NodeMCU1_Switch2,3);
		
	}
end

rule startLillyPillyBedTapFor3MinutesSummer
when
	Time cron "0 30 8,14,20 * DEC-FEB ? *"
then
		var Number rainToday = Melbourne_Weather_Rain_In_MM.state as DecimalType;
		var Number rainYesterday = Melbourne_Weather_Current_Rain_In_MM.historicState(now.minusDays(1)).state as DecimalType;

	if (rainToday <=0 && rainYesterday <=0 ) {
		turnOnSwitchWithRunTimerInMinutes.apply(NodeMCU1_Switch2,3);
		
	}
end
