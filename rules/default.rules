    import org.openhab.core.library.types.*
    import org.openhab.model.script.actions.*

    import java.lang.Math
    import java.util.Calendar
    import java.util.Date
    import java.util.TimeZone
    import java.text.SimpleDateFormat
    import java.util.ArrayList;
import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*

var String prevTemp = "Hello"
var ArrayList<int> temperatures = new ArrayList<int>()
var int counter = 0
var String studyRoomTemp 


rule TemperatureChanged
when
	Item MyFirstSensor received update
then
	studyRoomTemp = MyFirstSensor.state
	
//	logDebug("Demo","current temp:"+MyFirstSensor.state)
	if (Integer::parseInt(MyFirstSensor.state.toString) > 25)
	{
//		logDebug("Demo","Setting the Switch On");

//		Relay1_Switch2.sendCommand(ON)
	}
	else
	{
//		logDebug("Demo","Setting the Switch OFF");
//		Relay1_Switch2.sendCommand(OFF)
	}
	postUpdate(MySecondSensor,MyFirstSensor.state))
end


rule TurnOnSwitch
when
	Time cron "0 52 23 ? * *"
then
	Relay1_Switch2.sendCommand(ON)
end

rule TurnOffSwitch
when
	Time cron "0 53 23 ? * *"
then
	Relay1_Switch2.sendCommand(OFF)
end

rule Relay1_Switch1_Command_Updated
when
	Item Relay1_Switch1_Command received update
then
	if (Relay1_Switch1_Command.state == "ON")
	{
		Relay1_Switch1.sendCommand(ON)
		Relay1_Switch2.sendCommand(ON)
	}else {
		Relay1_Switch1.sendCommand(OFF)
		Relay1_Switch2.sendCommand(OFF)
	}
end 



rule "MqttPostionPatrikParse"
  when 
    Item mqttPositionPatrikRaw received update
  then
    var String json = mqttPositionPatrikRaw.state.toString
	logDebug("Demo","json String:"+json)
    var String type = transform("JSONPATH", "$._type", json)
	logDebug("Demo","json2 String:"+json)
      var String lat  = transform("JSONPATH", "$.lat", json)
	logDebug("Demo","type:"+lat)
      var String lon  = transform("JSONPATH", "$.lon", json)
      var String acc  = transform("JSONPATH", "$.acc", json)
      var String batt = transform("JSONPATH", "$.batt", json)
	logDebug("Demo","type:"+type)
    if (type == "location") {

	logDebug("Demo","lat:"+lat+" lon:"+lon+" acc:"+acc+" batt:"+batt)

      postUpdate(Latitude,  lat)
      sendCommand(Longitude, lon)
      sendCommand(Acc,   acc) 
      sendCommand(Batt,  batt)
	
if (batt=="40"){
	logDebug("Demo","Setting the Switch2 ON");
	sendCommand(Relay1_Switch2,ON)
}else {
	logDebug("Demo","Setting the Switch2 OFF");
	sendCommand(Relay1_Switch2,OFF)
}
    }
  end

rule "Test JSONPath"
when
	 Time cron "1 * * * * ?"
then
  var String json = '{"store":{"book":[{"category":"reference","author":"Nigel Rees","title": "Sayings of the Century", "price": 8.95  } ],  "bicycle": { "color": "red",  "price": 19.95} }}' 
  var test = transform("JSONPATH","$.store.book[0].author", json)
  var test2 = transform("JSONPATH","$.store.book[0].category",json)
  logDebug("Demo","json:"+json)
  logDebug("Demo","Test:"+test)
  logDebug("Demo","Test2:"+test2)
end


rule send_mqtt_when_relay1_on_off
when
	Item Relay1_Switch2 changed
then
	var state = Relay1_Switch2.state
	var prevState = previousState
	var response = "Relay1_Switch2 changed from:"+prevState+" to "+state
	var json = "{ switch:Relay1_Switch2,state:"+state+",prevState:"+prevState+"}"
	sendCommand(mqttOut,json)
end
